"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _globalVars = _interopRequireDefault(require("./globalVars"));
var _mainEventConnectors = _interopRequireDefault(require("./mainEventConnectors"));
var _constants = require("./constants");
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

// constants

/**
 * Subscribe to UI events.
 * @method subscribe
 * @param {String} type - The type of event.
 * @param {Function} cb - The callback function.
 * @param {Object} options.context - The caller.
 * @param {Number} options.throttleRate - The amount of time for throttling.
 * @param {Boolean} options.useRAF - Use rAF for throttling if true.
 * @param {Object} options.eventOptions - Option to pass to event listener
 * @return {Object} The object with unsubscribe function.
 */
function subscribe(type, cb) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const useRAF = options.useRAF || false;
  let throttleRate = parseInt(options.throttleRate, 10);
  const eventOptions = options.eventOptions;
  if (isNaN(throttleRate)) {
    throttleRate = _constants.DEFAULT_THROTTLE_RATE;
  }
  if (useRAF) {
    throttleRate = 'raf';
  }

  // once those variables enabled, then never disabled.
  _globalVars.default.enableScrollInfo = _globalVars.default.enableScrollInfo || options.enableScrollInfo || false;
  _globalVars.default.enableResizeInfo = _globalVars.default.enableResizeInfo || options.enableResizeInfo || false;
  _globalVars.default.enableTouchInfo = _globalVars.default.enableTouchInfo || options.enableTouchInfo || false;
  return _mainEventConnectors.default[type](throttleRate, cb, options, eventOptions);
}
var _default = exports.default = subscribe;
module.exports = exports.default;