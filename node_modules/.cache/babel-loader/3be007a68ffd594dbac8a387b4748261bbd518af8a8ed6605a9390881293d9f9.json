{"ast":null,"code":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport globalVars from '../globalVars';\nconst {\n  supportPassiveEvent\n} = globalVars;\nconst defaultEventOption = {\n  capture: false,\n  passive: false\n};\n\n/**\n * Cross-browser addEventListener.\n * @method listen\n * @param {Object} target - The target to add event listener.\n * @param {String} eventType - The event type.\n * @param {Function} handler - The event handler.\n * @param {Object} handler - The options object that specifies\n * characteristics about the event listener.\n * @return {Object} The object to be able to remove the handler.\n */\nfunction listen(target, eventType, handler, options) {\n  let add = 'addEventListener';\n  let remove = 'removeEventListener';\n  let type = eventType;\n  const eventOptions = supportPassiveEvent ? Object.assign({}, defaultEventOption, options) : false;\n  if (!target.addEventListener && target.attachEvent) {\n    add = 'attachEvent';\n    remove = 'detachEvent';\n    type = \"on\".concat(eventType);\n  }\n  target[add](type, handler, eventOptions);\n  return {\n    remove() {\n      target[remove](eventType, handler);\n    }\n  };\n}\nexport default listen;","map":{"version":3,"names":["globalVars","supportPassiveEvent","defaultEventOption","capture","passive","listen","target","eventType","handler","options","add","remove","type","eventOptions","Object","assign","addEventListener","attachEvent","concat"],"sources":["C:/xampp/htdocs/fm_react_mysql/node_modules/subscribe-ui-event/dist-es/lib/listen.js"],"sourcesContent":["/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport globalVars from '../globalVars';\nconst {\n  supportPassiveEvent\n} = globalVars;\nconst defaultEventOption = {\n  capture: false,\n  passive: false\n};\n\n/**\n * Cross-browser addEventListener.\n * @method listen\n * @param {Object} target - The target to add event listener.\n * @param {String} eventType - The event type.\n * @param {Function} handler - The event handler.\n * @param {Object} handler - The options object that specifies\n * characteristics about the event listener.\n * @return {Object} The object to be able to remove the handler.\n */\nfunction listen(target, eventType, handler, options) {\n  let add = 'addEventListener';\n  let remove = 'removeEventListener';\n  let type = eventType;\n  const eventOptions = supportPassiveEvent ? Object.assign({}, defaultEventOption, options) : false;\n  if (!target.addEventListener && target.attachEvent) {\n    add = 'attachEvent';\n    remove = 'detachEvent';\n    type = `on${eventType}`;\n  }\n  target[add](type, handler, eventOptions);\n  return {\n    remove() {\n      target[remove](eventType, handler);\n    }\n  };\n}\nexport default listen;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,eAAe;AACtC,MAAM;EACJC;AACF,CAAC,GAAGD,UAAU;AACd,MAAME,kBAAkB,GAAG;EACzBC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACnD,IAAIC,GAAG,GAAG,kBAAkB;EAC5B,IAAIC,MAAM,GAAG,qBAAqB;EAClC,IAAIC,IAAI,GAAGL,SAAS;EACpB,MAAMM,YAAY,GAAGZ,mBAAmB,GAAGa,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEb,kBAAkB,EAAEO,OAAO,CAAC,GAAG,KAAK;EACjG,IAAI,CAACH,MAAM,CAACU,gBAAgB,IAAIV,MAAM,CAACW,WAAW,EAAE;IAClDP,GAAG,GAAG,aAAa;IACnBC,MAAM,GAAG,aAAa;IACtBC,IAAI,QAAAM,MAAA,CAAQX,SAAS,CAAE;EACzB;EACAD,MAAM,CAACI,GAAG,CAAC,CAACE,IAAI,EAAEJ,OAAO,EAAEK,YAAY,CAAC;EACxC,OAAO;IACLF,MAAMA,CAAA,EAAG;MACPL,MAAM,CAACK,MAAM,CAAC,CAACJ,SAAS,EAAEC,OAAO,CAAC;IACpC;EACF,CAAC;AACH;AACA,eAAeH,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}